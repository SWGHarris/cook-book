// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema


// UPDATING THE DB SCHEMA:
// Making a modification that does not result in unwanted data loss?
//      1. Make the change to the schema in this file
//      2. Push schema additions: npx prisma db push
//
// Making a modification that results in unwanted data loss? (i.e. rename column, etc):
//      1. Make the change to the schema in this file.
//      2. Create draft SQL file: npx prisma migrate dev --create-only
//      3. Modify the file and apply with: npx prisma migrate dev
//
// more about custom migration: https://www.prisma.io/docs/guides/database/developing-with-prisma-migrate/customizing-migrations

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.text annotations in model Account below
    // Further reading: 
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    firstName     String?
    lastName      String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    recipes       Recipe[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// recipe models
model Recipe {
    @@map("recipe")

    id          String    @id @default(cuid())
    createdAt   DateTime @default(now())
    title       String
    author      User @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    authorId    String
    desc        String
    steps       RecipeStep[]
}

model RecipeStep {
    @@map("recipe_step")

    id          String    @id @default(cuid())
    recipe      Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    recipeId    String
    // may want order to be a unique constraint along with id to ensure no step has the same order.
    order       Int
    title       String?
    text        String
}
